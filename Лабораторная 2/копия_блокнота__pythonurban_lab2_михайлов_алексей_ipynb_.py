# -*- coding: utf-8 -*-
"""Копия блокнота "PythonUrban_lab2. Михайлов Алексей ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UoRUUMdn2hzOGBZgEPkWjSAWjecbhNks

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install osmnx  
!pip install geopandas
!pip install keplergl
!pip install jupyter_contrib_nbextensions
!pip install mapclassify
!pip install jupyterlab
!jupyter labextension install @jupyter-widgets/jupyterlab-manager keplergl-jupyter
!jupyter nbextension install --py --sys-prefix keplergl
!jupyter nbextension enable --py --sys-prefix keplergl

# TODO собрать импорты всех модулей в одном месте
import osmnx as ox
import geopandas as gpd
from google.colab import output
from keplergl import KeplerGl
import pandas as pd

TILES = "CartoDB positron"  # Название подложки для карт

# TODO указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "R1114354"  # название территории для которой будут строиться слои

# TODO указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/
# изменить на свое https://raw.githubusercontent.com/alexmichel1084/Mikhaylov_Alex_task/main/geojson_sloi/architectural_structures.geojson
KGIOP_FILE_URL = "https://raw.githubusercontent.com/alexmichel1084/Mikhaylov_Alex_task/main/geojson_sloi/kgiop_objects.geojson"  # ссылка на слой с объектами культурного наследия
STREETS_FILE_URL = "https://raw.githubusercontent.com/alexmichel1084/Mikhaylov_Alex_task/main/geojson_sloi/streets.geojson"  # ссылка на слой с улицами

"""## Территория

### Загрузка территории из OSM (Extract)
"""

# TODO загрузить geodataframe с геометрией для территории TERRITORY_NAME
district = ox.geocode_to_gdf([TERRITORY_NAME], by_osmid=True)
district

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf = gpd.read_file(STREETS_FILE_URL, mask=district)
# TODO переименовать столбцы в русские названия, кроме столбца geometry
gdf.rename(columns={"name": "Имя"}, inplace=True) 
gdf

"""### Обработка данных с улицами (Transform)"""

# TODO сгруппировать и объединить геометрии с одинаковыми названиями
gdf["Имя"].is_unique
gdf = gdf.dissolve(by="Имя")
gdf

"""### Сохранение слоя с улицами (Load)"""

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf.to_crs(4326).to_file('district.geojson', driver='GeoJSON')

gdf.explore(tiles=TILES)

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf_new = gpd.read_file(KGIOP_FILE_URL, mask=district)
gdf_new

"""### Обработка объектов культурного наследия (Transform)"""

# TODO добавить два столбца lon и lat, в которых будут долгота и широта 
gdf_new["lon"] = gdf_new.to_crs(3857).geometry.centroid.to_crs(4326).x
gdf_new["lat"] = gdf_new.to_crs(3857).geometry.centroid.to_crs(4326).y
gdf_new

"""### Сохранение слоя с объектами культурного наследия (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry
rename_columns = {
    "id": "айди",
    "ensemble_name": "имя_ансамбля",
    "object_name": "имя_объекта",
    "occurrence_time": "дата_создания",
    "object_location": "локация",
    "historical_category": "историческая_категория",
    "normative_act": "нормативный_акт",
    "object_type": "тип_объекта_культурного_наследия",
    "lon": "долгота",
    "lat": "широта"
}
gdf_new.rename(columns=rename_columns, inplace=True)
gdf_new

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf_new.to_crs(4326).to_file('cultural_heritage.geojson', driver='GeoJSON')

gdf_new.explore(tiles=TILES)

